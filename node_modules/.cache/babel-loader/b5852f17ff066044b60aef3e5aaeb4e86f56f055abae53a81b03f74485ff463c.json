{"ast":null,"code":"var _jsxFileName = \"D:\\\\chat app\\\\client\\\\src\\\\components\\\\context\\\\ConversationProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n  return useContext(ConversationsContext);\n}\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function ConversationProvider({\n  id,\n  children\n}) {\n  _s2();\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n  function createConversation(recipients) {\n    setConversations(prevConversation => {\n      return [...prevConversation, {\n        recipients,\n        message: []\n      }];\n    });\n  }\n  const addMessageToConversation = useCallback(({\n    recipients,\n    text,\n    sender\n  }) => {\n    setConversations(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return {\n            ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n        return conversation;\n      });\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }, [setConversations]);\n  function sendMessage(recipients, text) {\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: id\n    });\n  }\n  const formmatedConverstions = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => contact.id === recipient);\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return {\n      ...conversation,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formmatedConverstions,\n    selectedConversation: formmatedConverstions[selectedConversationIndex],\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s2(ConversationProvider, \"7TMnLXVVeOlHT6v6siX4UQoksQs=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n_c = ConversationProvider;\nvar _c;\n$RefreshReg$(_c, \"ConversationProvider\");","map":{"version":3,"names":["React","useContext","useState","useLocalStorage","useContacts","jsxDEV","_jsxDEV","ConversationsContext","createContext","useConversations","_s","ConversationProvider","id","children","_s2","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","createConversation","recipients","prevConversation","message","addMessageToConversation","useCallback","text","sender","prevConversations","madeChange","newMessage","newConversations","map","conversation","arrayEquality","messages","sendMessage","formmatedConverstions","index","recipient","contact","find","name","selected","value","selectedConversation","selectConversationIndex","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/chat app/client/src/components/context/ConversationProvider.js"],"sourcesContent":["import React, { useContext,useState } from 'react'\r\nimport useLocalStorage from '../hooks/useLocalStorage';\r\nimport { useContacts } from './ContactProvider';\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationProvider({id, children }) {\r\n  const [conversations, setConversations] = useLocalStorage('conversations', [])\r\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\r\n  const {contacts}=useContacts();\r\n\r\n  function createConversation(recipients) {\r\n    setConversations(prevConversation => {\r\n      return [...prevConversation, { recipients,message:[] }]\r\n    })\r\n  }\r\n  const addMessageToConversation = useCallback(({ recipients, text, sender }) => {\r\n    setConversations(prevConversations => {\r\n      let madeChange = false\r\n      const newMessage = { sender, text }\r\n      const newConversations = prevConversations.map(conversation => {\r\n        if (arrayEquality(conversation.recipients, recipients)) {\r\n          madeChange = true\r\n          return {\r\n            ...conversation,\r\n            messages: [...conversation.messages, newMessage]\r\n          }\r\n        }\r\n\r\n        return conversation\r\n      })\r\n\r\n      if (madeChange) {\r\n        return newConversations\r\n      } else {\r\n        return [\r\n          ...prevConversations,\r\n          { recipients, messages: [newMessage] }\r\n        ]\r\n      }\r\n    })\r\n  }, [setConversations])\r\n  function sendMessage(recipients,text){\r\n    addMessageToConversation({recipients,text,sender:id})\r\n  }\r\n  const formmatedConverstions=conversations.map((conversation,index)=>{\r\n    const recipients=conversation.recipients.map(recipient=>{\r\n      const contact=contacts.find(contact=>contact.id===recipient)\r\n\r\n      const name=(contact && contact.name) || recipient\r\n\r\n      return {id:recipient,name}\r\n    })\r\n\r\n\r\n    const selected = index === selectedConversationIndex\r\n    return { ...conversation, recipients, selected }\r\n  })\r\n  \r\n  const value={\r\n    conversations:formmatedConverstions,\r\n    selectedConversation:formmatedConverstions[selectedConversationIndex],\r\n    selectConversationIndex: setSelectedConversationIndex,\r\n    createConversation\r\n  }\r\n     return (\r\n    <ConversationsContext.Provider value={ value }>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}