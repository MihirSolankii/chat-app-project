{"ast":null,"code":"var _jsxFileName = \"D:\\\\chat app\\\\client\\\\src\\\\components\\\\context\\\\ConversationProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useState, useCallback } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n  return useContext(ConversationsContext);\n}\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function ConversationProvider({\n  id,\n  children\n}) {\n  _s2();\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n  function createConversation(recipients) {\n    setConversations(prevConversation => {\n      return [...prevConversation, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n  const addMessageToConversation = useCallback(({\n    recipients,\n    text,\n    sender\n  }) => {\n    setConversations(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return {\n            ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n        return conversation;\n      });\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }, [setConversations]);\n  function sendMessage(recipients, text) {\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: id\n    });\n  }\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => contact.id === recipient);\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = id === message.sender;\n      return {\n        ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return {\n      ...conversation,\n      recipients,\n      messages,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s2(ConversationProvider, \"5xg6luTh9VRn9Js9NKekt3y8XsQ=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n_c = ConversationProvider;\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"ConversationProvider\");","map":{"version":3,"names":["React","useContext","useState","useCallback","useLocalStorage","useContacts","jsxDEV","_jsxDEV","ConversationsContext","createContext","useConversations","_s","ConversationProvider","id","children","_s2","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","createConversation","recipients","prevConversation","messages","addMessageToConversation","text","sender","prevConversations","madeChange","newMessage","newConversations","map","conversation","arrayEquality","sendMessage","formattedConversations","index","recipient","contact","find","name","message","fromMe","senderName","selected","value","selectedConversation","selectConversationIndex","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","a","b","length","sort","every","element","$RefreshReg$"],"sources":["D:/chat app/client/src/components/context/ConversationProvider.js"],"sourcesContent":["import React, { useContext, useState, useCallback } from 'react';\r\nimport useLocalStorage from '../hooks/useLocalStorage';\r\nimport { useContacts } from './ContactProvider';\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationProvider({ id, children }) {\r\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\r\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\r\n  const { contacts } = useContacts();\r\n\r\n  function createConversation(recipients) {\r\n    setConversations(prevConversation => {\r\n      return [...prevConversation, { recipients, messages: [] }];\r\n    });\r\n  }\r\n\r\n  const addMessageToConversation = useCallback(({ recipients, text, sender }) => {\r\n    setConversations(prevConversations => {\r\n      let madeChange = false;\r\n      const newMessage = { sender, text };\r\n      const newConversations = prevConversations.map(conversation => {\r\n        if (arrayEquality(conversation.recipients, recipients)) {\r\n          madeChange = true;\r\n          return {\r\n            ...conversation,\r\n            messages: [...conversation.messages, newMessage]\r\n          };\r\n        }\r\n\r\n        return conversation;\r\n      });\r\n\r\n      if (madeChange) {\r\n        return newConversations;\r\n      } else {\r\n        return [\r\n          ...prevConversations,\r\n          { recipients, messages: [newMessage] }\r\n        ];\r\n      }\r\n    });\r\n  }, [setConversations]);\r\n\r\n  function sendMessage(recipients, text) {\r\n    addMessageToConversation({ recipients, text, sender: id });\r\n  }\r\n\r\n  const formattedConversations = conversations.map((conversation, index) => {\r\n    const recipients = conversation.recipients.map(recipient => {\r\n      const contact = contacts.find(contact => contact.id === recipient);\r\n      const name = (contact && contact.name) || recipient;\r\n      return { id: recipient, name };\r\n    });\r\n\r\n    const messages = conversation.messages.map(message => {\r\n      const contact = contacts.find(contact => {\r\n        return contact.id === message.sender;\r\n      });\r\n      const name = (contact && contact.name) || message.sender;\r\n      const fromMe = id === message.sender;\r\n      return { ...message, senderName: name, fromMe };\r\n    });\r\n\r\n    const selected = index === selectedConversationIndex;\r\n    return { ...conversation, recipients, messages, selected };\r\n  });\r\n\r\n  const value = {\r\n    conversations: formattedConversations,\r\n    selectedConversation: formattedConversations[selectedConversationIndex],\r\n    sendMessage,\r\n    selectConversationIndex: setSelectedConversationIndex,\r\n    createConversation\r\n  };\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={value}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n\r\nfunction arrayEquality(a, b) {\r\n  if (a.length !== b.length) return false;\r\n\r\n  a.sort();\r\n  b.sort();\r\n\r\n  return a.every((element, index) => {\r\n    return element === b[index];\r\n  });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}